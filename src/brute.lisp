(in-package #:dysfunkycom)

(defun hohmann-time (r1 r2)
  (nth-value 2 (hohmann r1 r2)))

(defun problem-3-controller-brute (sim &key (target (sim-target sim)) (jumper #'controller-brute-jumper)
				   (end-condition (chaser-condition-non-changing-score sim)))
  (let ((time (funcall jumper sim :target target)))
    (loop repeat (- (round time) *chaser-lookahead*)
	  do (sim-step sim))
    (chaser-controller sim :target target :closing-condition end-condition)

    (values (reverse (sim-thrusts sim)) (sim-time sim))))

(defun problem-3-controller-touch (sim &key (target (sim-target sim)) (jumper #'controller-brute-jumper))
  (let* ((time (funcall jumper sim :target target)) (lookahead (/ time 5)))
    (loop repeat (- (round time) lookahead)
	  do (sim-step sim))
    (chaser-controller-touch sim :target target :step lookahead)

    (values (reverse (sim-thrusts sim)) (sim-time sim))))

(defun problem-3-controller-suicide (sim)
  (chaser-controller sim)
  (values (reverse (sim-thrusts sim)) (sim-time sim)))

(defun controller-brute-original-jumper (sim &key (target (sim-target sim)))
  (let ((start-time (sim-time sim)))
    (destructuring-bind (target-radius wait)
	(estimate-target-radius-iteratively sim target)
      (push (list 0 0 target-radius) *show-orbits*)
      (iter (repeat wait) (sim-step sim))
      (problem-3-controller-jump sim target-radius)
      (- (sim-time sim) start-time))))

(defun controller-brute-jumper (sim &key (target (sim-target sim)))
  (let* ((r (sat-r (sim-us sim))) (t0 (sim-time sim))
	(angle0 (sat-angle (sim-us sim)))
	(w (sat-circular-orbit-vangle (sim-us sim))))
    (destructuring-bind (wait-time target-r)
	(iter (for last-time first 0 then time-base)
	      (for time-base first 1000 then (+ time-base 10000))
	      (for result =
		   (iter (for time from last-time below time-base by 1)
			 (multiple-value-bind (ex ey)
			     (sim-pos-at-time sim target (+ t0 time))
			   (multiple-value-bind (init-dv end-dv jump-time) 
			       (hohmann r (d ex ey))
			     (declare (ignore end-dv))
			     (let ((our-angle (+ angle0 (* (- time jump-time) w))))
			       (when (and (plusp (- time jump-time)) 
					  (> 0.01
					     (abs (normalize-vangle (- our-angle (angle ex ey) pi)))))
				 (finding (list (- time jump-time) (d ex ey)) 
					  minimizing init-dv)))))))
	      (while (null result))
	      (finally (return result)))
      (loop until (>= (sim-time sim) (+ t0 wait-time))
	 do (sim-step sim))
      (controller-hohmann-jump-not-stopping sim target-r))))
