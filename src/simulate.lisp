(in-package #:dysfunkycom)

(defun compile-instruction (insn rd)
  (declare (type (unsigned-byte 32) insn)
           (type (unsigned-byte 14) rd))
  (let ((op (ldb (byte 4 28) insn)))
    (if (plusp op)
        (let ((r1 (ldb (byte 14 14) insn))
              (r2 (ldb (byte 14  0) insn)))
          (ecase op
            ((1 2 3 4)
               `(setf (aref mem ,rd)
                      (,(ecase op
                          (1 '+)
                          (2 '-)
                          (3 '*)
                          (4 `(lambda (r1 r2)
                                (if (= r2 0d0) 0d0 (/ r1 r2)))))
                        (aref mem ,r1) (aref mem ,r2))))
            (5 `(setf (aref port ,r1) (aref mem ,r2)))
            (6 `(setf (aref mem ,rd)
                      (let ((r1 (aref mem ,r1))
                            (r2 (aref mem ,r2)))
                        (if (= status 1) r1 r2))))))
        (let ((op  (ldb (byte  4 24) insn))
              (imm (ldb (byte 10 14) insn))
              (r1  (ldb (byte 14  0) insn)))
          (ecase op
            (0)
            (1 `(setf status
                      (if (,(ecase imm
                              (0 '<)
                              (1 '<=)
                              (2 '=)
                              (3 '>=)
                              (4 '>))
                            (aref mem ,r1) 0d0)
                          1
                          0)))
            ((2 3 4)
               `(setf (aref mem ,rd)
                      ,(ecase op
                         (2 `(sqrt (aref mem ,r1)))
                         (3 `(aref mem ,r1))
                         (4 `(aref port ,r1))))))))))

(deftype vm-mem (&optional (length (ash 1 14)))
  `(simple-array double-float (,length)))

(defun compile-instructions (instructions)
  (declare (type (simple-array (unsigned-byte 32) 1) instructions))
  `(lambda (mem port)
     (declare (type vm-mem mem port)
              (optimize speed (safety 0)))
     (let ((status 0))
       (declare (type fixnum status))
       ,@(loop for rd upfrom 0
               for insn across instructions
               for form = (compile-instruction insn rd)
               when form
                 collect form)
       port)))

(defun load-program (file)
  (with-open-file (s file :element-type '(unsigned-byte 8))
    (let* ((len (file-length s))
           (buf (make-array len :element-type '(unsigned-byte 8)))
           (nframes (ceiling len 12))
           (insns (make-array nframes :element-type '(unsigned-byte 32)))
           (data  (make-array (ash 1 14) :element-type 'double-float)))
      (read-sequence buf s)
      (sb-sys:with-pinned-objects (buf)
        (let ((sap (sb-sys:vector-sap buf)))
          (dotimes (i nframes)
            (let ((base (* i 12)))
              (setf (values (aref insns i) (aref data i))
                    (if (evenp i)
                        (values (sb-sys:sap-ref-double sap base)
                                (sb-sys:sap-ref-32     sap (+ base 8)))
                        (values (sb-sys:sap-ref-32     sap base)
                                (sb-sys:sap-ref-double sap (+ base 4)))))))))
      (values (compile-instructions insns) data))))
