(in-package #:dysfunkycom)

(defun find-sat-by-id (id sim)
  (find id (sim-sats sim) :test (lambda (name sat) (and (numberp (sat-name sat)) (= (sat-name sat) name)))))

(defun nearest-satellite (id-list sim)
  (let ((sats (mapcar (lambda (id) (find-sat-by-id id sim)) id-list))
	(us (sim-us sim)))
    (iter (for sat in sats)
	  (finding sat minimizing (sat-distance sat us)))))

(defun problem-4-jump (sim target &key end-condition chasing-steps)
  ;;   (problem-3-controller-brute sim :target target
  ;; 			      :jumper #'controller-brute-original-jumper
  ;; 			      :end-condition (or end-condition
  ;; 						 (and chasing-steps
  ;; 						      (let ((counter 0))
  ;; 							(lambda (sim)
  ;; 							  (declare (ignore sim))
  ;; 							  (>= (incf counter) chasing-steps))))
  ;; 						 (chaser-condition-non-changing-score sim)))
  (declare (ignore end-condition chasing-steps))
  (problem-3-controller-touch sim :target target :jumper #'controller-brute-original-jumper))

(defun fuel-low-p (sim)
  (< (sim-fuel sim) 5000))

(defun tformat (sim str &rest args)
  (apply #'format t (concatenate 'string "[~d] " str) (sim-time sim) args))

(defun refuel-controller (sim)
  (let ((sim (copy-sim sim)))
    (sim-step sim)
    (tformat sim "Fuel before meeting with station: ~f~%" (sim-fuel sim)))
  (tformat sim "Stabilizing orbit.~%")
  (controller-stabilise-to-circular-orbit sim)
  (problem-1-controller sim (* 2 (sat-r (sim-fuelstation sim))))
  (problem-4-jump sim (sim-fuelstation sim)
		  :end-condition (let ((fuel (sim-fuel sim)))
				   (lambda (sim) (> (sim-fuel sim) fuel))))
  (tformat sim "Distance from fuel station: ~f~%" (sat-distance (sim-fuelstation sim) (sim-us sim)))
  (tformat sim "Fuel after meeting with station: ~f~%" (sim-fuel sim))
  (tformat sim "Stabilizing orbit.~%")
  (controller-stabilise-to-circular-orbit sim)
  (tformat sim "Fuel before re-fueling: ~f~%" (sim-fuel sim))
  (chaser-controller-touch sim :target (sim-fuelstation sim))
  (tformat sim "Fuel after re-fueling: ~f~%" (sim-fuel sim))
  (tformat sim "Stabilizing orbit.~%")
  (controller-stabilise-to-circular-orbit sim))

(defun change-direction-and-stablise (sim)
  (let* ((us (sim-us sim)))
    (sim-step sim (* 2 (sat-vx us)) (* 2 (sat-vy us)))
    (stablize-to-circular-orbit sim)))

(defun refuel-controller-4004 (sim)
  (let ((sim (copy-sim sim)))
    (sim-step sim)
    (tformat sim "Fuel before meeting with station: ~f~%" (sim-fuel sim)))
  (problem-1-controller sim (* 20 (sat-r (sim-fuelstation sim))))
  (change-direction-and-stablise sim)
  (problem-4-jump sim (sim-fuelstation sim)
		  :end-condition (let ((fuel (sim-fuel sim)))
				   (lambda (sim) (> (sim-fuel sim) fuel)))) 
  (tformat sim "Distance from fuel station: ~f~%" (sat-distance (sim-fuelstation sim) (sim-us sim)))
  (tformat sim "Fuel after meeting with station: ~f~%" (sim-fuel sim)))

(defun go-for-satellite (sat sim)
  (tformat sim "Stabilizing orbit.~%")
  (controller-stabilise-to-circular-orbit sim)
  (tformat sim "Going for satellite ~d (fuel: ~f).~%" (sat-name sat) (sim-fuel sim))
  (problem-4-jump sim sat)
  (tformat sim "Fuel after meeting with satellite: ~f~%" (sim-fuel sim)))

(defun problem-4-controller (sim)
  (iter (with satellites = '(0 1 2 3 4 5 6 7 8 9 10))
	(while satellites)
	(for nearest = (nearest-satellite satellites sim))
	(go-for-satellite nearest sim)
	(for prev-score first 0 then score)
	(for score = (sim-score sim))
	(if (sat-done nearest)
	    (progn (tformat sim "Meeting was successful.~%")
		   (setf satellites (remove (sat-name nearest) satellites)))
	    (tformat sim "Meeting was NOT successful.~%"))
	(while (>= score 0))
	(when (fuel-low-p sim)
	  (refuel-controller sim))
	(while (>= score 0))
	(finally (return (values (reverse (sim-thrusts sim)) (sim-time sim))))))


